.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Business::BR::RG 3pm"
.TH Business::BR::RG 3pm "2011-05-23" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Business::BR::RG \- Perl module to test for correct RG numbers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use Business::BR::RG;
.PP
print \*(L"ok \*(R" if test_rg('390.533.447\-05'); # prints 'ok '
print \*(L"bad \*(R" unless test_rg('231.002.999\-00'); # prints 'bad '
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1RG\s0 number is an identification number of Brazilian citizens
emitted by the Department of Public Safety, which is called
\&\*(L"Secretaria de SeguranA\*~Xa PA\*~Xblica (\s-1SSP\s0)\*(R".
.PP
\&\s-1RG\s0 stands for \*(L"Cadastro Geral\*(R" because is valid in all brazil territory.
May be use as passport to Argentina, Paraguay, Uruguay and Chile.
.PP
The \s-1RG\s0 is comprised of a base of 8 digits and one check digit.
It is usually written like '12.002.999\-0' so as to be
more human-readable.
.PP
This module provides \f(CW\*(C`test_rg\*(C'\fR for checking that a \s-1RG\s0 number
is \fIcorrect\fR. Here a \fIcorrect \s-1RG\s0 number\fR means
.IP "\(bu" 4
it is 9 digits long
.IP "\(bu" 4
it satisfies the check equation mentioned below
.PP
Before checking, any non-digit letter is stripped, making it
easy to test formatted entries like '21.002.999\-00' and
entries with extra blanks like '   99.221.222\-00  '.
Except the letter X, because it's represents the number 10.
.IP "\fBtest_rg\fR" 4
.IX Item "test_rg"
test_rg('39.985.676\-X') # incorrect \s-1RG\s0, returns 0
test_rg(' 39.985.676\-6 ') # is ok, returns 1
test_rg('123') # nope, returns undef
.Sp
Tests whether a \s-1RG\s0 number is correct. Before testing,
any non-digit [except X, no matter its case] character is stripped.
Then it is
expected to be 9 digits long and to satisfy
check equation which validate the check digit.
See \*(L"\s-1THE\s0 \s-1CHECK\s0 \s-1EQUATIONS\s0\*(R".
.Sp
The policy to get rid of '.' and '\-' is very liberal.
It indeeds discards anything that is not a digit (0, 1, ..., 9, or X)
or letter. That is handy for discarding spaces as well
.Sp
test_rg(' 39.985.676\-6 ') # is ok, returns 1
.Sp
But extraneous inputs like '3.9.9 8w5.6w7h6?6' are
also accepted. If you are worried about this kind of input,
just check against a regex:
.Sp
warn \*(L"bad \s-1RG:\s0 only digits (9) expected\*(R"
	unless ($rg =~ /^\ed{8}(\ed|x)$/i);
.Sp
warn \*(L"bad \s-1RG:\s0 does not match mask '_\|_._\|_\|_._\|_\|_\-_'\*(R"
	unless ($rg =~ /^\ed{2}\e.\ed{3}\e.\ed{3}\-(\ed|x)$/i);
.Sp
\&\s-1NOTE\s0. Integer numbers like 1234567
with fewer than 8 digits will be normalized (eg. to
\&\*(L"001234567\*(R") before testing.
.IP "\fBcanon_rg\fR" 4
.IX Item "canon_rg"
canon_rg(99); # returns '000000099'
canon_rg('99.999.999\-9'); # returns '999999999'
.Sp
Brings a candidate for a \s-1RG\s0 number to a canonical form.
In case,
the argument is an integer, it is formatted to at least
9 digits. Otherwise, it is stripped of any
non-alphanumeric [again, except x] characters and returned as it is.
.IP "\fBformat_rg\fR" 4
.IX Item "format_rg"
format_rg('00000000'); # returns '00.000.000\-0'
.Sp
Formats its input into '00.000.000\-0' mask.
First, the argument is canon'ed and then
dots and hyphen are added to the first
9 digits of the result.
So you can call format_rg even when its already formated.
.IP "\fBparse_rg\fR" 4
.IX Item "parse_rg"
($base, \f(CW$dv\fR) = parse_rg($rg);
\&\f(CW$hashref\fR = parse_rg('99.222.111\-0'); # { base => '99222111', dv => '0' }
.Sp
Splits a candidate for \s-1RG\s0 number into base and check
digits (dv \- dA\*~\%gitos de verificaA\*~XA\*~Xo). It canon's
the argument before splitting it into 8\- and 1\-digit
parts. In a list context,
returns a two-element list with the base and the check
digits. In a scalar context, returns a hash ref
with keys 'base' and 'dv' and associated values.
.IP "\fBrandom_rg\fR" 4
.IX Item "random_rg"
\&\f(CW$rand_rg\fR = random_rg($valid);
.Sp
\&\f(CW$correct_rg\fR = \fIrandom_rg()\fR;
\&\f(CW$rg\fR = \fIrandom_rg\fR\|(1); # also a correct \s-1RG\s0
\&\f(CW$bad_rg\fR = \fIrandom_rg\fR\|(0); # an incorrect \s-1RG\s0
.Sp
Generates a random \s-1RG\s0. If \f(CW$valid\fR is omitted or 1, it is guaranteed
to be \fIcorrect\fR. If \f(CW$valid\fR is 0, it is guaranteed to be \fIincorrect\fR.
This function is intented for mass test. (Use it wisely.)
.Sp
The implementation is simple: just generate a 8\-digits random number,
hopefully with a uniform distribution and then compute the check digits.
If \f(CW$valid\fR==0, the check digits are computed \fBnot to\fR satisfy the
check equations.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
\&\f(CW\*(C`test_rg\*(C'\fR is exported by default. \f(CW\*(C`canon_rg\*(C'\fR, \f(CW\*(C`format_rg\*(C'\fR,
\&\f(CW\*(C`parse_rg\*(C'\fR and \f(CW\*(C`random_rg\*(C'\fR can be exported on demand.
.SH "THE CHECK EQUATIONS"
.IX Header "THE CHECK EQUATIONS"
A correct \s-1RG\s0 number has one check digit which are computed
from the base 8 first digits. Consider the \s-1RG\s0 number
written as 9 digits
.PP
c[1] c[2] c[3] c[4] c[5] c[6] c[7] c[8] dv[1]
.PP
To check whether a \s-1RG\s0 is correct or not, it has to satisfy
the check equations:
.PP
c[1]*2 + c[2]*3 + c[3]*4 + c[4]*5 + c[5]*6 + c[6]*7 + c[7]*8 + c[8]*9 +
dv[9] * 100 = 0 (mod 11)
.SH "BUGS"
.IX Header "BUGS"
until now I do not found any \s-1RG\s0 that has less than 8 digits.
But, I guess, old people still have it.
For now, this is the only way that I found to check \s-1RG\s0.
If you found any bug, feel free to send e\-mail, open an issue on github or open a \s-1RT\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Note that this module only tests correctness.
It doesn't enter the merit whether the \s-1RG\s0 number actually exists
at the Brazilian government databases.
.PP
Please reports bugs via \s-1CPAN\s0 \s-1RT\s0 or github.
.PP
<http://github.com/renatocron/>
.PP
You may be interested too in validation of \s-1CPF/CNPJ\s0. So you can look at:
.PP
Business::BR::CNPJ
.PP
Business::BR::CPF
.PP
You should too make a search about the Business::BR namespace.
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Perldoc"
.IX Subsection "Perldoc"
You can find documentation for this module with the perldoc command (to read this)
.PP
.Vb 1
\&        perldoc Business\e:\e:BR\e:\e:RG
.Ve
.SS "Github"
.IX Subsection "Github"
If you want to contribute with the code, you can fork this module on github:
.PP
<https://github.com/renatocron/Business\*(--BR\-\-RG>
.PP
You can even report a issue.
.SH "AUTHOR"
.IX Header "AUTHOR"
Renato \s-1CRON\s0, <rentocron@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2011 by Renato \s-1CRON\s0
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.1 or,
at your option, any later version of Perl 5 you may have available.
